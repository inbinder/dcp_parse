#! /usr/bin/env python3
#This utility attempts to parse the output text files generated by dcp_inspect
#for faster inspection and when attending to multiple DCP inspections.
#dcp_inspect_parse runs on Python3.x 
import logging
import os
import re
import sys

from glob import glob

logging.basicConfig(level=logging.DEBUG)

class DcpParser:
    """Parses DCP Inspector output files, and writes summary files to a
    directory whose path is supplied at construction."""

    
       
    def parse(self, dir):
        """Parses all files in the current directory."""
        self.cpl                  = []
        self.content              = []
        self.contentkind          = []
        self.container            = ''
        self.errors               = [] 
        self.package              = []
        self.summary              = []
        self.mainsound            = []
        self.mainpicture          = []
        self.encryption           = []
        self.duration             = []
        self.fsp                  = []
        self.dimensiontype        = []
        self.aspect               = []
        self.filesize             = [2]
        self.audio                = []
        self.cpltype              = []
        
        os.chdir(dir)
        self.files = glob('*')
        logging.debug("Found files: %s", self.files)
        for self.file in self.files:
        #try:
            with open(self.file) as self.data:
                logging.debug("Opening file: %s", self.data)
                print("Scanning...\t\t\t", self.file)
                for each_line in self.data:
                    print()
                    self.file_summary()
                    
                   
                   
        #except:
         #   pass
    
     
    
    def prints(self):
        
            print('Container:             \t\t',self.container)        
            print('CPL Type:              \t\t',self.cpltype)
            print('Duration:              \t\t',self.duration)
            print('Frame Rate:            \t\t',self.fps)
            print('Aspect Ratio:          \t\t',self.aspect)
            print('Dimension:             \t\t',self.dimensiontype) 
            print('Content Title:         \t\t',self.content)
            print('Audio for DCP:         \t\t',self.audio)
            print('Package size:          \t\t',self.filesize)
            print('Encryption status:     \t\t',self.encryption)       
            print('CPL ID:                \t\t',self.cpl)  
            print('Content Kind:          \t\t',self.contentkind) 
            print('\n')
            print('There are',self.errors[1],'Errors and',self.errors[3],'hints for', self.content)
            if self.errors[1] != '0':
                print('could be issues\n')
            else:
                print('This DCP appears to be OK\n')       
    
    
    def file_summary(self):
        print('made it to summary')
        #self.file_audio()
        for self.each_line in self.data:
            if 'summary'in self.each_line:
                self.summary.extend(self.each_line.split())
                print(self.summary.extend(self.each_line.split()))
                for x in range(len(self.summary)):
                    if 'fps' in self.summary[x]:
                        self.fps = self.summary[(x-1)]
                        self.duration = self.summary[(x-2)].strip()
                       
                    elif 'summary:' in self.summary[x]:
                        self.content = self.summary[(x+1)]
                        self.content.strip(',')
                        
                    elif '2D' in self.summary[x]:
                        self.dimensiontype = self.summary[(x)]
                        self.aspect = self.summary[(x+1)].strip(',')
                        
                    elif '3D' in self.summary[x]:
                        self.dimensiontype = self.summary[(x)]
                        self.aspect = self.summary[(x+1)]
                    
            elif 'Errors' in self.each_line:
                self.errors=(self.each_line.split())
            elif 'Package with total size'in self.each_line:
                if 'Bytes 0' in self.each_line:
                    pass
                else:
                    self.temp =[]
                    self.temp.extend(self.each_line.split())
                    self.filesize=(self.temp.pop()+' '+self.temp.pop())
                
              
    def file_audio(self):
         print('made it to audio')
         self.file_picture()
         for self.each_line in self.data:

             if 'MainSound'in self.each_line:
                
                if 'audio' in self.each_line:
                    self.m = re.search('([0-9]+)bps', self.each_line)
                    if self.m is None:
                        self.bps = 'bps error'
                    else:
                        self.bps = int(m.group(1))

                    self.m = re.search('([0-9]+)ch', self.each_line)
                    if self.m is None:
                        self.channels = 'channel error'
                    else:
                        self.channels = int(m.group(1))

                    self.m = re.search('([0-9]+)kHz', self.each_line)
                    if self.m is None:
                        self.bandwidth = 'bandwidth error'
                    else:
                        self.bandwidth = int(m.group(1))

                    self.audio = '%ich %ikHz %ibps' % (self.channels, self.bandwidth, self.bps)

    
    def file_picture(self):
        self.file_cplId()
        self.file_cplType()
        self.file_contentKind()
        self.file_contentTitleText()
        
        print('made it to picture')
        for self.each_line in self.data:

            if 'MainPicture'in self.each_line:
               if 'pictures' in self.each_line:
                   self.temp = []
                   self.temp.extend(self.each_line.split(','))
                   self.container = self.temp[-2]
                   self.encryption= self.temp[-3]
        
                

        
    def file_cplId(self):
        print('cpl id')
        if 'CPL Id:'in self.each_line:
            self.cpl=(self.each_line.split())
    
    
    def file_cplType(self):
        if 'CPL type: 'in self.each_line:
            self.cpltype=(self.each_line.split())
            self.cpltype = self.cpltype[2]
    
    def file_contentKind(self):
        if 'ContentKind: 'in self.each_line:
            self.contentkind=(self.each_line.split())
            self.contentkind = self.contentkind[1]
    
    def file_contentTitleText(self):
        if 'ContentTitleText:'in self.each_line:
            self.content=(self.each_line.split(':'))
            self.content = self.content[1]
    
    
   
   
            
       

        
           

if __name__ == '__main__':
    print("Input directory name: " + os.getcwd())
    default_dir = os.getenv('HOME') + '/Desktop/dcp_output'
    prompt = "Please enter the output directory name [" + default_dir + "]: "
    dir = input(prompt) or default_dir
    print("Output directory name: " + dir)
    
    parser = DcpParser()
    
    parser.parse(dir )
    parser.prints()
    #parser.parse_summary
    


#
#cpl                  = []
#content              = []
#contentkind          = []
#container            = []
#errors               = [] 
#package              = []
#summary              = []
#mainsound            = []
#mainpicture          = []
#encryption           = []
#duration             = []
#fsp                  = []
#dimensiontype        = []
#aspect               = []
#filesize             = [2]
#audio                = []
#cpltype              = []
#
#dir= []
##dir=input("Please enter directory location of dcp_inspect output***\n")
#dir = '/Users/zacharymanning/Desktop/dcp_output'
# 
#print('Changing directories')
#os.chdir(dir)
#print(os.getcwd())
#
#print('Attempting to open file(s) in directory:\n')
#print(dir,'\n')
#
#for file in glob.glob("*"):
#    try:
#        with open(file) as data:
#            print("Scanning...\t\t\t", file)
#            #data = open(file)
#            for each_line in data:
#                if 'summary'in each_line:
#                    summary.extend(each_line.split())
#                elif 'Errors' in each_line:
#                    errors=(each_line.split())
#                elif 'Package with total size'in each_line:
#                    if 'Bytes 0' in each_line:
#                        continue
#                    else:
#                        temp =[]
#                        temp.extend(each_line.split())
#                        filesize=(temp.pop()+' '+temp.pop())
#                elif 'MainSound'in each_line:
#                    
#                    if 'audio' in each_line:
#                        m = re.search('([0-9]+)bps', each_line)
#                        if m is None:
#                            bps = None
#                        else:
#                            bps = int(m.group(1))
#
#                        m = re.search('([0-9]+)ch', each_line)
#                        if m is None:
#                            channels = None
#                        else:
#                            channels = int(m.group(1))
#
#                        m = re.search('([0-9]+)kHz', each_line)
#                        if m is None:
#                            bandwidth = None
#                        else:
#                            bandwidth = int(m.group(1))
#
#                        audio = '%ich %ikHz %ibps' % (channels, bandwidth, bps)
#                                                        
#                elif 'MainPicture'in each_line:
#                    if 'pictures' in each_line:
#                        temp = []
#                        temp.extend(each_line.split(','))
#                        container = temp[-2]
#                        encryption= temp[-3]
#                       
#                elif 'CPL Id:'in each_line:
#                    cpl=(each_line.split())
#                    
#                elif 'CPL type: 'in each_line:
#                    cpltype=(each_line.split())
#                    cpltype = cpltype[2]
#                    
#                elif 'ContentKind: 'in each_line:
#                    contentkind=(each_line.split())
#                    contentkind = contentkind[1]
#                    
#                elif 'ContentTitleText:'in each_line:
#                    content=(each_line.split(':'))
#                    content = content[1]
#                    
#        
#      
#            for x in range(len(summary)):
#                if 'fps' in summary[x]:
#                    #print(summary[(x-1)],'near fps')
#                    #print(summary[x],'near fps')
#                    fps = summary[(x-1)]
#                    duration = summary[(x-2)].strip()
#                   
#                   
#                elif 'summary:' in summary[x]:
#                    #print(summary[(x)])
#                    content = summary[(x+1)]
#                    content.strip(',')
#                    
#                elif '2D' in summary[x]:
#                    #print(summary[(x)], 'found')
#                    dimensiontype = summary[(x)]
#                    
#                    aspect = summary[(x+1)].strip(',')
#                elif '3D' in summary[x]:
#                    #print(summary[(x)], 'found')
#                    dimensiontype = summary[(x)]
#                    aspect = summary[(x+1)]
#                
#            
#            print('Container:             \t\t',container.strip())        
#            print('CPL Type:              \t\t',cpltype)
#            print('Duration:              \t\t',duration.strip(','))
#            print('Frame Rate:            \t\t',fps)
#            print('Aspect Ratio:          \t\t',aspect.strip(','))
#            print('Dimension:             \t\t',dimensiontype.strip(',')) 
#            print('Content Title:         \t\t',content.strip(',').strip('""'))
#            print('Audio for DCP:         \t\t', audio)
#            print('Package size:          \t\t',filesize)
#            print('Encryption status:     \t\t',encryption.upper().strip())       
#            print('CPL ID:                \t\t', cpl[2])  
#            print('Content Kind:          \t\t',contentkind.upper()) 
#            print('\n')
#            print('There are',errors[1],'Errors and',errors[3],'hints for', content.strip(','))
#            if errors[1] != '0':
#                print('could be issues\n')
#            else:
#                print('This DCP appears to be OK\n')
#                 
#    except IOError as x:
#  
#        print('cannot open', file)
#        print(x)
##    except:
##         #   print("Exception Encountered\n")
##           # print("Error {0}".format(str(args[0])).encode("utf-8"))
##            #print(err.args[0])
##            #pass
#
#        